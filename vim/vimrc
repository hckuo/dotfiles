set encoding=utf-8
set backspace=indent,eol,start
set guifont="Fira Mono Regular 14"
" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
Plug 'morhetz/gruvbox'
Plug 'tpope/vim-surround'
Plug 'scrooloose/nerdcommenter'
Plug 'vim-airline/vim-airline'
Plug 'vim-scripts/ctags.vim'
Plug 'raimondi/delimitmate'
Plug 'nlknguyen/c-syntax.vim'
Plug 'ntpeters/vim-better-whitespace'
Plug 'google/yapf', { 'rtp': 'plugins/vim', 'for': 'python' }
Plug 'lervag/vimtex'
Plug 'vim-scripts/awk.vim'
Plug 'mileszs/ack.vim'
Plug 'tpope/vim-repeat'
Plug 'itspriddle/vim-shellcheck'
Plug 'suan/vim-instant-markdown', {'for': 'markdown'}
Plug 'fatih/vim-go'
Plug 'rust-lang/rust.vim'
Plug 'joe-skb7/cscope-maps'
Plug 'vivien/vim-linux-coding-style'
let g:linuxsty_patterns = [ "/usr/src/", "/linux" ]
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
" {{{
    map <leader>f :Files<CR>
    map <leader>b :Buffer<CR>
    let g:fzf_preview_window = ['up:40%:hidden', 'ctrl-/']
    let g:fzf_layout = { 'down': '20%' }
    let g:fzf_buffers_jump = 1
" }}}
Plug 'preservim/tagbar'
    let g:airline#extensions#tagbar#enabled = 1
call plug#end()

let g:deoplete#enable_at_startup = 1
set completeopt-=preview
set termguicolors
colorscheme gruvbox

" let mapleader                         = "\<space>"
let g:config_path                     = $HOME."/.vimrc"

let g:vimtex_quickfix_open_on_warning = 0
let g:tex_flavor                      = "latex"

if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
  let g:ackprg = 'ag --vimgrep'
endif

map <C-n> :NERDTreeToggle<CR>

command! EditConfig execute 'edit' g:config_path
command! InstallPlugin execute 'source' g:config_path | PlugInstall

" Esc to exit emulated term
tnoremap <Esc> <C-\><C-n>

" Toggle-related mapping
nnoremap <leader>tb :TagbarToggle<CR>
nnoremap <leader>tn :set invnumber<CR>
nnoremap <leader>tt :below terminal<CR>
nnoremap <leader>mm :!make<CR>

""create horizontal buffer"
"nnoremap <leader>b" :new<CR>
""create vertical buffer"
"nnoremap <leader>b% :vnew<CR>

" Remove trailing space
nnoremap <leader>rts :%s/\s\+$//e<CR>

imap jj <Esc>
imap jk <Esc>:
nnoremap <leader>; :

function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
endfunction
inoremap <silent><expr> <TAB>
            \ pumvisible() ? "\<C-n>" :
            \ <SID>check_back_space() ? "\<TAB>" :
            \ deoplete#manual_complete()

syntax on
filetype on
filetype indent on
set wildignore+=*.o
set autowriteall
set timeoutlen=1500
set cc=80
set expandtab
set autoindent smartindent
"set completeopt+=menuone
"set completeopt+=noselect
"set shortmess+=c   " Shut off completion messages
set shell=zsh
set hlsearch " highlight search "
set cino+=(0
set bg=dark
set tabstop=4
set shiftwidth=4
set nu

autocmd Filetype c,cpp setlocal tabstop=4 noet shiftwidth=4
autocmd BufRead,BufNewFile *.h,*.c set filetype=c

autocmd FileType plaintex,tex,latex,text call EnableSpellCheck()

" functions
function EnableSpellCheck()
    syntax spell toplevel
    set spell spelllang=en_us
    highlight SpellBad cterm=underline
endfunction
